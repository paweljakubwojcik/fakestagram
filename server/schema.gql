# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Edge {
  cursor: String
  node: Post
}

type Image {
  createdAt: DateTime!
  id: String!
  post: Post!
  updatedAt: DateTime!
  url: UrlSet!
}

type Like {
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type Mutation {
  createPost(description: String!, images: [String!]!): Post!
  deletePost(id: String!): Boolean!
  dislikePost(post: String!): Boolean!
  likePost(post: String!): Boolean!
  login(credentials: Credentials!): User!
  logout: Boolean!
  register(credentials: Credentials!): User!
  updatePost(description: String, id: String!): Post
}

type Post {
  createdAt: DateTime!
  creator: User!
  description: String!
  id: String!
  images: [Image!]!
  likeCount: Float!
  likedByMe: Boolean!
  likes: [Like!]!
  updatedAt: DateTime!
}

type PostConnection {
  edges: [Edge!]
  pageInfo: PostPageInfo
}

type PostPageInfo {
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
}

enum PostSort {
  createdAt
  id
  title
  updatedAt
}

type Query {
  isUsernameAvailable(username: String!): Boolean!
  me: User
  post(id: ID!): Post
  posts(after: ID, before: ID, first: Int, last: Int, sort: PostSort = createdAt): PostConnection!
  signedUrl(filename: String!): String!
  signedUrls(filenames: [String!]!): [String!]!
}

type UrlSet {
  large: String!
  medium: String!
  original: String!
  small: String!
}

type User {
  createdAt: DateTime!
  id: String!
  posts: [Post!]!
  updatedAt: DateTime!
  username: String!
}
